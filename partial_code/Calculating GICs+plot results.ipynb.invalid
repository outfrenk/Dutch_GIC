{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "import pandas as pd\n",
    "import math\n",
    "# import scipy.sparse as sps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.9127810446661897e-11\n"
     ]
    }
   ],
   "source": [
    "path='/usr/people/out/Documents/380+220kV_extended'\n",
    "kabels=pd.read_csv(path+'/spreadsheetcables.csv', delimiter = ';')\n",
    "trafo=pd.read_csv(path+'/spreadsheettrafo.csv', delimiter = ';')\n",
    "\n",
    "###### make some matrices #######\n",
    "trafo_connect=np.zeros((len(trafo),len(trafo))) #connectivity trafo\n",
    "trafo_all_connections=np.zeros((len(trafo),len(kabels))) #connections possible between trafo and every cable\n",
    "trafo_cond=np.zeros((len(trafo),len(trafo))) # The conductivity matrix\n",
    "stat_heading=np.zeros((len(trafo),len(trafo))) #heading stations to another\n",
    "stat_length=np.zeros((len(trafo),len(trafo))) #length between stations\n",
    "stat_voltN=np.zeros((len(trafo),len(trafo))) #voltage in North direction between stations\n",
    "stat_voltE=np.zeros((len(trafo),len(trafo))) #voltage in east direction between stations\n",
    "I_GICcable=np.zeros((len(trafo),len(trafo))) #GIC between stations(= through cables)\n",
    "\n",
    "kabel_resist=np.zeros(len(kabels))\n",
    "kabel_cond=np.zeros(len(kabels)) #gives total conductivity per connected cable segment per cable\n",
    "total_kabel_cond=np.zeros(len(kabels)) #gives total conductivity per segment for all cables\n",
    "aantal_kabels=np.zeros(len(kabels)) #aantal kabels (per fase) per traject\n",
    "station_lat=np.zeros(len(trafo)) #latitude stations in degrees\n",
    "station_lon=np.zeros(len(trafo)) #longitude stations in degrees\n",
    "station_rlat=np.zeros(len(trafo)) #now in radians\n",
    "station_rlon=np.zeros(len(trafo))\n",
    "volt_result=np.zeros(len(trafo)) # resulting voltage in nodes\n",
    "ground_cond=np.zeros(len(trafo))\n",
    "\n",
    "cable_icon=np.zeros(len(kabels)) # icon array for cable and trafo resp.\n",
    "trafo_icon=np.zeros(len(trafo))\n",
    "\n",
    "################ Determine inducted currents ######################\n",
    "# heading=np.zeros(len(kabels))\n",
    "# length=np.zeros(len(kabels))\n",
    "\n",
    "J_north=np.zeros(len(trafo))\n",
    "J_east=np.zeros(len(trafo))\n",
    "\n",
    "# set electric field at 1V/1000m for now in North and East direction \n",
    "E_north=1/1000.\n",
    "E_east=1/1000.\n",
    "\n",
    "###################################################################\n",
    "##### connect trafo and cable number to position in matrix #####\n",
    "for line in range(len(kabels)):\n",
    "    cable_icon[line]=kabels.at[line,'kabelnr']\n",
    "for line in range(len(trafo)):\n",
    "    trafo_icon[line]=trafo.at[line,'trafonr']\n",
    "\n",
    "\n",
    "##### make trafo-trafo connectivity matrix ###### CORRECT\n",
    "for line in range(len(trafo)): \n",
    "    temp=trafo.at[line,'verbonden trafo'] #get right column\n",
    "    temp=temp.split(\",\") #split values\n",
    "    \n",
    "    for item in temp:\n",
    "        temp2=int(item)\n",
    "        trafo_connect[line,np.where(trafo_icon == temp2)[0]]=True #check for connection other trafo\n",
    "        del temp2\n",
    "    del temp\n",
    "\n",
    "###### make trafo-cable connectivity matrix ###### CORRECT\n",
    "#all connection\n",
    "for line in range(len(trafo)):\n",
    "    temp=trafo.at[line,'alle aansluitingen']\n",
    "    temp=temp.split(\",\")\n",
    "    for item in temp:\n",
    "        temp2=int(item)\n",
    "        trafo_all_connections[line,np.where(cable_icon == temp2)[0]]=True\n",
    "        del temp2\n",
    "    del temp\n",
    "    \n",
    "###### make total conductivity vector for cables####### CORRECT\n",
    "for line in range(len(kabels)):\n",
    "    kabel_cond[line]=float(kabels.at[line,'conductivity old'])\n",
    "    kabel_resist[line]=1/kabel_cond[line]\n",
    "for line in range(len(kabels)):\n",
    "#     aantal_kabels[line]=1\n",
    "    aantal_kabels[line]=kabels.at[line,'kab/3'] #get amount of cables per traject\n",
    "    total_kabel_cond[line]=aantal_kabels[line]*kabel_cond[line] #conductivity per cabletraject\n",
    "    \n",
    "\n",
    "##### now conductivity matrix ##### \n",
    "for row,line in enumerate(trafo_connect):\n",
    "    station_lat[row]=trafo.at[row,'lat'] # get trafostation latitude and longitude\n",
    "    station_lon[row]=trafo.at[row,'lon'] \n",
    "    station_rlat[row]=np.radians(station_lat[row]) #get trafostation latitude and longitude in radians\n",
    "    station_rlon[row]=np.radians(station_lon[row])\n",
    "        \n",
    "    for column,item in enumerate(line):\n",
    "        if item:\n",
    "            \n",
    "            temp=trafo_all_connections[row,:]+trafo_all_connections[column,:]\n",
    "            temp2=0\n",
    "            \n",
    "            for counter,value in enumerate(temp):\n",
    "                if value == 2: # if 2 then we have found the connecting cables\n",
    "                    temp2+=1/total_kabel_cond[counter]  #because of serieschain we have to add 1/sigma\n",
    "            if temp2==0:\n",
    "                print(row,column)\n",
    "            trafo_cond[row,column]=-1/temp2 #add cable resistance to off-diagonal\n",
    "            trafo_cond[row,row]+=1/temp2 #add cable resistance to trace\n",
    "            del temp, temp2\n",
    "\n",
    "# add grounding conductivity to trace            \n",
    "for line in range(len(trafo_connect)):\n",
    "    ground_cond[line]=trafo.at[line,'conductivity total']\n",
    "    trafo_cond[line,line]+=trafo.at[line,'conductivity total']\n",
    "    \n",
    "    \n",
    "################### total induced currents for stationary field ##########################\n",
    "for row,line in enumerate(trafo_connect): #get heading and length between stations\n",
    "    for column,item in enumerate(line):\n",
    "        if item and column>=row:\n",
    "            temp=math.cos(station_rlat[column])*math.sin(station_rlon[column]-station_rlon[row])\n",
    "            temp2=math.cos(station_rlat[row])*math.sin(station_rlat[column])-math.sin(station_rlat[row])*math.cos(station_rlat[column])*math.cos(station_rlon[column]-station_rlon[row])\n",
    "            stat_heading[row,column]=np.abs(math.degrees(math.atan(temp/temp2)))\n",
    "            \n",
    "            temp3=math.sin((station_rlat[column]-station_rlat[row])/2.)**2+math.cos(station_rlat[row])*math.cos(station_rlat[column])*math.sin((station_rlon[column]-station_rlon[row])/2.)**2\n",
    "            stat_length[row,column]=6371000*2*math.atan(np.sqrt(temp3)/np.sqrt(1-temp3))\n",
    "            \n",
    "            stat_heading[column,row]=stat_heading[row,column]\n",
    "            stat_length[column,row]=stat_length[row,column]\n",
    "\n",
    "for row,line in enumerate(trafo_connect):\n",
    "    for column,item in enumerate(line):\n",
    "        if item:            # get voltage between stations\n",
    "            signlat=np.sign(station_lat[row]-station_lat[column])\n",
    "            signlon=np.sign(station_lon[row]-station_lon[column])\n",
    "            stat_voltN[row,column]=signlat*E_north*np.cos(math.radians(stat_heading[row,column]))*stat_length[row,column]\n",
    "            stat_voltE[row,column]=signlon*E_east*np.sin(math.radians(stat_heading[row,column]))*stat_length[row,column]\n",
    "            \n",
    "            J_north[row]+=stat_voltN[row,column]*trafo_cond[row,column]*-1*-1 #-1*-1 because trafo_cond is negative\n",
    "            J_east[row]+=stat_voltE[row,column]*trafo_cond[row,column]*-1*-1 # and 1V/km N = x A in southern direction\n",
    "            \n",
    "J_total=J_north+J_east\n",
    "\n",
    "##### Apply the inversion #####\n",
    "trafo_icond=np.linalg.inv(trafo_cond)\n",
    "Volt_result=np.linalg.solve(trafo_cond,J_east)\n",
    "I_GIC=Volt_result*ground_cond # GIC ground NIET DELEN\n",
    "# print(Volt_result, I_GIC)\n",
    "\n",
    "for row,line in enumerate(trafo_connect):\n",
    "    for column,item in enumerate(line):\n",
    "        if item and column>=row:\n",
    "            I_GICcable[row,column]=(Volt_result[row]-Volt_result[column])*trafo_cond[row,column]*-1\n",
    "            I_GICcable[column,row]=-1*I_GICcable[row,column]\n",
    "print(np.sum(I_GIC))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29\n",
      "[-3.33970874e+00 -2.59414033e+00 -5.05446197e+00  6.68592656e+00\n",
      "  9.77866717e+00  1.08506085e+01  1.00590696e+01  9.83001414e+00\n",
      "  1.36455638e+01  1.30997925e+01  6.27277319e+00  7.06117097e+00\n",
      "  5.03616274e+00  8.51844779e+00  9.77033286e+00  1.08846695e+01\n",
      "  1.36645878e+01  1.00659861e+01  2.87392115e+00  5.85664873e+00\n",
      "  2.42318564e+01  1.23964464e+01  1.19741732e+01  1.19833367e+01\n",
      "  6.76075554e+00  5.55160268e+00  3.29221496e+00  6.89788622e-02\n",
      " -9.68230346e-01 -2.14462917e+00  2.46949570e+00  2.40460730e+00\n",
      "  1.57149951e+01  8.56342123e+00  3.05509420e+00 -6.57182951e-01\n",
      " -4.18391402e+00 -3.65733506e+00 -3.34561176e+00 -3.48678729e+00\n",
      " -2.37952514e+00 -1.97525803e+00 -1.14840133e+01  5.20781695e-08\n",
      "  5.12898112e+00  6.78054086e-08 -1.90598391e+00 -9.27393762e-01\n",
      "  1.65101191e+00  8.87442957e+00  1.14233155e+01  9.96990416e+00\n",
      " -3.96970887e+00  2.41797203e+00 -1.34011309e+01 -1.06684943e+01\n",
      " -1.07201385e-07 -1.96056800e-07 -1.95888351e+01 -2.81078490e+01\n",
      " -1.47081949e+01 -1.22243150e+01 -1.09550602e+01 -7.46464880e+00\n",
      " -1.52353538e+01 -1.92494248e+01 -2.88004751e+01  1.67496637e+00\n",
      "  1.68729158e-08 -7.59126689e+00 -1.42630603e-07 -1.17943681e+01\n",
      " -1.75632754e+01 -2.36724461e+01 -7.18939850e+00 -6.56818394e+00\n",
      "  8.82591702e-01 -7.83120286e-08 -7.83533880e+00 -5.39004686e+00\n",
      " -3.04760531e-08 -2.88262378e+00 -3.20130039e+00  1.61407309e-01\n",
      " -6.47018755e-09 -7.86285316e-01  7.42002569e-01  2.70877394e+00\n",
      "  2.16455774e+00  4.31528497e+00 -1.44231548e+00  3.84073670e+00\n",
      "  1.20010255e-08  3.42010670e+00  1.94044779e+00  3.84437985e+00\n",
      "  1.75250719e+00 -2.84680543e+00 -1.32679847e-01 -2.92457013e+00\n",
      " -4.17513567e-01 -1.91474318e+01 -7.46957448e+00 -5.46971504e+00\n",
      " -2.51172103e+01 -2.98581257e+01 -2.28014518e+01 -4.41217431e+00\n",
      " -8.17930260e+00 -2.49560928e+01 -1.11816277e+01 -1.39160682e+01\n",
      " -1.39844886e-07 -2.66218290e+01  5.89823935e+00  8.71012324e+00\n",
      "  1.69176605e-08  1.70812079e+00  4.21770236e+00 -2.91024995e+00\n",
      " -6.36340318e+00 -1.19290737e+01 -1.02039315e+00  2.39998231e+01\n",
      "  2.01117072e-07  2.01530075e+01  1.26170715e-07  7.92646585e+00\n",
      "  1.31048160e+01  1.14487559e-08  2.43327811e+00 -2.90317033e+00\n",
      "  2.42573507e-01  5.87398804e-01 -3.92591907e+00 -1.15290781e+01\n",
      " -7.98679513e+00  3.89391740e+00  1.28719388e+01  5.31409436e+00\n",
      "  1.05736152e-07  9.39282637e+00  1.34056651e+01  1.37386353e+01\n",
      "  1.39247479e-07  1.17437238e+01  9.67176946e+01 -2.97997142e+00\n",
      " -1.38086692e-07]\n"
     ]
    }
   ],
   "source": [
    "absAMP=abs(I_GIC[0:-3])\n",
    "maxAMP=np.max(absAMP) #amperes for 1 cm\n",
    "maxAMP=int(maxAMP)\n",
    "print(maxAMP)\n",
    "print(I_GIC)\n",
    "##### Save files #######\n",
    "GIC=pd.DataFrame(columns=['lon','lat','GIC',f'GIC/{maxAMP}'])\n",
    "GICmatrix=pd.DataFrame()\n",
    "for i in range(len(trafo_connect)):\n",
    "    GIC.at[i,'lon']=station_lon[i]\n",
    "    GIC.at[i,'lat']=station_lat[i]\n",
    "    GIC.at[i,'GIC']=I_GIC[i]\n",
    "    GIC.at[i,f'GIC/{maxAMP}']=I_GIC[i]/maxAMP\n",
    "    GICmatrix[i]=I_GICcable[i,:]\n",
    "GIC.to_csv(path_or_buf=f'{path}/GIC_trafo.csv', sep=';', index=False, header=True)\n",
    "GICmatrix.to_csv(path_or_buf=f'{path}/GIC_cable.csv', sep=';', index=False, header=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# lim1=np.min(station_lon)-0.75\n",
    "# lim2=np.max(station_lon)+0.75\n",
    "# lim3=np.min(station_lat)-0.75\n",
    "# lim4=np.max(station_lat)+0.75\n",
    "# lim1=3.3\n",
    "# lim2=9.6\n",
    "# lim3=49\n",
    "# lim4=54\n",
    "lim1=3.3\n",
    "lim2=7.5\n",
    "lim3=50.5\n",
    "lim4=54\n",
    "\n",
    "legendlon=lim2-1\n",
    "legendlat=lim4-0.1\n",
    "textlon=legendlon+0.6\n",
    "textlat=legendlat\n",
    "\n",
    "\n",
    "legend=open('legend.txt','w+')\n",
    "legend.write(f'{legendlon} {legendlat} 1 1')\n",
    "legend.close()\n",
    "legendtxt=open('legendtext.txt', 'w+')\n",
    "legendtxt.write(f'{textlon} {textlat} {maxAMP} A')\n",
    "legendtxt.close()\n",
    "\n",
    "##### Use GMT to plot GICs ######\n",
    "direction='TEST'\n",
    "proj='-JM15C -P'\n",
    "lims=f'-R{lim1}/{lim2}/{lim3}/{lim4}'\n",
    "psfile=f'{path}/380+220kVGIC{direction}.ps' #aanpassen\n",
    "pngfile=f'{path}/380+220kVGIC{direction}.png' #aanpassen\n",
    "os.system(f'gmt pscoast {proj} {lims} -W0.5p -K -Ggrey -Slightblue -Df -N1/0.25p> {psfile}' )\n",
    "os.system(f'gmt psbasemap {proj} {lims} -Ba1g1 -BWeSn+t\"GIC {direction}\" -O -K>> {psfile}' )\n",
    "# os.system(f'gmt psxy {path}/trafo.csv {proj} {lims} -Ss0.1c -Wblack -O -K>> {psfile}')\n",
    "os.system(f'gmt psxy {path}/GIC_trafo.csv {proj} {lims} -Ctopo.cpt -Scc -O -K>> {psfile}')\n",
    "# os.system(f'gmt psxy {path}/cables220.csv {proj} {lims} -W0.5p -Wred -O -K>> {psfile}' )\n",
    "os.system(f'gmt psxy {path}/cables.csv {proj} {lims} -W0.5p -Wred -O -K>> {psfile}' )\n",
    "os.system(f'gmt psxy legend.txt {proj} {lims} -Ctopo.cpt -W -Scc -O -K>> {psfile}')\n",
    "os.system(f'gmt pstext legendtext.txt {proj} {lims} -F+f20pHelvetica,black -O>> {psfile}')\n",
    "os.system(f'convert -density 300 {psfile} {pngfile}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1, 1], [2, 1], [1, 2], [2, 2]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([0.7])"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# if we would have a gridded electric field, this interpolation technique could be used\n",
    "from scipy.interpolate import griddata\n",
    "listt=[[1,1],[2,1],[1,2],[2,2]]\n",
    "values=[0,1,1,3]\n",
    "interpolationpoints=[1.3,1.2]\n",
    "print(listt)\n",
    "griddata(listt,values,interpolationpoints,method='linear')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Directory has already been created, data could be destroyed!\n",
      "New data is added now!\n",
      "Thread 1 is acquiring potential for timestep 0!\n",
      "Script has been completed!\n"
     ]
    }
   ],
   "source": [
    "# obtain real voltages per cable piece and execute total code\n",
    "import os\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import math\n",
    "import logging\n",
    "from scipy.interpolate import griddata\n",
    "from threading import local\n",
    "localvar=local()\n",
    "from multiprocessing import Process\n",
    "from multiprocessing import Lock\n",
    "lock=Lock()\n",
    "path='/usr/people/out/Documents/Magnetic_field/station_results/31-10-2003'\n",
    "logging.basicConfig(filename=f'{path}/GIClogbook.log', level=logging.DEBUG, format='%(asctime)s %(message)s')\n",
    "#################################### first reading in datasets #####################################################\n",
    "try:\n",
    "    os.mkdir(f'{path}/GIC')\n",
    "except:\n",
    "    logging.warning(\"Directory has already been created, data could be destroyed!\")\n",
    "    print(\"Directory has already been created, data could be destroyed!\")\n",
    "logging.info('Reading in datasets!')\n",
    "Electric_Xfiles=[]\n",
    "Electric_Yfiles=[]\n",
    "os.system(f' ls {path}/electric_field_north/*.csv > {path}/temp.txt')\n",
    "f=open(f'{path}/temp.txt')\n",
    "for item in f:\n",
    "    item=item.strip('\\n')\n",
    "    Electric_Xfiles.append(item)\n",
    "f.close()\n",
    "os.system(f' ls {path}/electric_field_east/*.csv > {path}/temp.txt')\n",
    "f=open(f'{path}/temp.txt')\n",
    "for item in f:\n",
    "    item=item.strip('\\n')\n",
    "    Electric_Yfiles.append(item)\n",
    "f.close()\n",
    "os.system(f'rm {path}/temp.txt')\n",
    "\n",
    "for counter,file in enumerate(Electric_Xfiles):\n",
    "    Xfile=pd.read_csv(file, delimiter=' ', header=None)\n",
    "    values=Xfile.to_numpy()\n",
    "    break\n",
    "EX_matrix=np.zeros((len(Electric_Xfiles),len(values)))    \n",
    "EY_matrix=np.zeros((len(Electric_Xfiles),len(values)))\n",
    "    \n",
    "for counter,file in enumerate(Electric_Xfiles):\n",
    "    Xfile=pd.read_csv(file, delimiter=' ', header=None)\n",
    "    values=Xfile.to_numpy()\n",
    "    EX_matrix[counter,:]=values[:,2]\n",
    "lat=values[:,1]\n",
    "lon=values[:,0]\n",
    "for counter,file in enumerate(Electric_Yfiles):\n",
    "    Yfile=pd.read_csv(file, delimiter=' ', header=None)\n",
    "    values=Yfile.to_numpy()\n",
    "    EY_matrix[counter,:]=values[:,2]\n",
    "del item, f, Xfile, values, Yfile\n",
    "\n",
    "######################################### Getting the needed GIC matrices and code #################################\n",
    "logging.info('Starting with the GIC code!')\n",
    "path2='/usr/people/out/Documents/380+220kV_extended'\n",
    "kabels=pd.read_csv(path2+'/spreadsheetcables.csv', delimiter = ';')\n",
    "trafo=pd.read_csv(path2+'/spreadsheettrafo.csv', delimiter = ';')\n",
    "trafo_connect=np.zeros((len(trafo),len(trafo))) #connectivity trafo\n",
    "trafo_all_connections=np.zeros((len(trafo),len(kabels))) #connections possible between trafo and every cable\n",
    "trafo_cond=np.zeros((len(trafo),len(trafo))) # The conductivity matrix\n",
    "stat_heading=np.zeros((len(trafo),len(trafo))) #heading stations to another\n",
    "stat_length=np.zeros((len(trafo),len(trafo))) #length between stations\n",
    "station_lat=np.zeros(len(trafo)) #latitude stations in degrees\n",
    "station_lon=np.zeros(len(trafo)) #longitude stations in degrees\n",
    "ground_cond=np.zeros(len(trafo))\n",
    "cable_icon=np.zeros(len(kabels)) # icon array for cable and trafo resp.\n",
    "trafo_icon=np.zeros(len(trafo))\n",
    "\n",
    "##### connect trafo and cable number to position in matrix #####\n",
    "for line in range(len(kabels)):\n",
    "    cable_icon[line]=kabels.at[line,'kabelnr']\n",
    "for line in range(len(trafo)):\n",
    "    trafo_icon[line]=trafo.at[line,'trafonr']\n",
    "##### make trafo-trafo connectivity matrix ######\n",
    "for line in range(len(trafo)): \n",
    "    temp=trafo.at[line,'verbonden trafo'] #get right column\n",
    "    temp=temp.split(\",\") #split values\n",
    "    \n",
    "    for item in temp:\n",
    "        temp2=int(item)\n",
    "        trafo_connect[line,np.where(trafo_icon == temp2)[0]]=True #check for connection other trafo\n",
    "        del temp2\n",
    "    del temp\n",
    "###### make trafo-cable connectivity matrix ######\n",
    "for line in range(len(trafo)):\n",
    "    temp=trafo.at[line,'alle aansluitingen']\n",
    "    temp=temp.split(\",\")\n",
    "    for item in temp:\n",
    "        temp2=int(item)\n",
    "        trafo_all_connections[line,np.where(cable_icon == temp2)[0]]=True\n",
    "        del temp2\n",
    "    del temp\n",
    "###### make conductivity matrix ######\n",
    "for row,line in enumerate(trafo_connect):\n",
    "    trafo_cond[row,row]=trafo.at[row,'conductivity total']\n",
    "    for column,item in enumerate(line):\n",
    "        if item:\n",
    "            temp=trafo_all_connections[row,:]+trafo_all_connections[column,:]\n",
    "            temp2=0\n",
    "            for counter,value in enumerate(temp):\n",
    "                if value == 2: # if 2 then we have found the connecting cables\n",
    "                    temp2+=1/(float(kabels.at[counter,'conductivity'])*kabels.at[counter,'kab/3'])  #because of serieschain we have to add 1/sigma\n",
    "#             if temp2==0:\n",
    "#                 print(row,column)\n",
    "            trafo_cond[row,column]=-1/temp2 #add cable resistance to off-diagonal\n",
    "            trafo_cond[row,row]+=1/temp2 #add cable resistance to trace\n",
    "            del temp, temp2\n",
    "###### get heading and length between stations #####\n",
    "for row,line in enumerate(trafo_connect):\n",
    "    for column,item in enumerate(line):\n",
    "        if item and column>=row:\n",
    "            Alat=np.radians(trafo.at[row,'lat'])\n",
    "            Alon=np.radians(trafo.at[row,'lon'])\n",
    "            Blat=np.radians(trafo.at[column,'lat'])\n",
    "            Blon=np.radians(trafo.at[column,'lon'])\n",
    "            temp=math.cos(Blat)*math.sin(Blon-Alon)\n",
    "            temp2=math.cos(Alat)*math.sin(Blat)-math.sin(Alat)*math.cos(Blat)*math.cos(Blon-Alon)\n",
    "            stat_heading[row,column]=np.abs(math.degrees(math.atan(temp/temp2)))\n",
    "            temp3=math.sin((Blat-Alat)/2.)**2+math.cos(Alat)*math.cos(Blat)*math.sin((Blon-Alon)/2.)**2\n",
    "            stat_length[row,column]=6371000*2*math.atan(np.sqrt(temp3)/np.sqrt(1-temp3))\n",
    "            stat_heading[column,row]=stat_heading[row,column]\n",
    "            stat_length[column,row]=stat_length[row,column]\n",
    "            del temp, temp2, temp3, Alat, Alon, Blat, Blon\n",
    "del line, item, row, column, value, counter\n",
    "######### get necessary arrays ########\n",
    "for item in range(len(trafo)):\n",
    "    station_lat[item]=trafo.at[item,'lat']\n",
    "    station_lon[item]=trafo.at[item,'lon']\n",
    "    ground_cond[item]=trafo.at[item,'conductivity total']\n",
    "\n",
    "############################### Run the function with multiple processors ##########################################\n",
    "logging.info('Start multiprocessing!')\n",
    "print(\"New data is added now!\")\n",
    "n=1\n",
    "nrsteps=int(1/n)\n",
    "threads=list()\n",
    "for index in range(n):\n",
    "    q=Process(target=GICfunction, args=(index+1,nrsteps*index,nrsteps*(index+1),trafo,EX_matrix,EY_matrix,lat,lon,station_lat,station_lon,trafo_connect,stat_heading,stat_length,trafo_cond,ground_cond,path,path2))\n",
    "    threads.append(q)\n",
    "    q.start()\n",
    "for thread in threads:\n",
    "    thread.join()\n",
    "logging.info(\"Script has been completed!\")\n",
    "print(\"Script has been completed!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "def GICfunction(q,begin,end,trafo,EX_matrix,EY_matrix,lat,lon,station_lat,station_lon,trafo_connect,stat_heading,stat_length,trafo_cond,ground_cond,path,path2):\n",
    "######################################### interpolation ############################################################\n",
    "    localvar.volt_result=np.zeros(len(trafo))\n",
    "    localvar.J_total=np.zeros(len(trafo))\n",
    "    localvar.grid_EX=np.zeros(len(trafo))\n",
    "    localvar.grid_EY=np.zeros(len(trafo))\n",
    "    logging.info(f'Thread {q} has started interpolation!')\n",
    "    for localvar.time in range(begin,end):#range(len(grid_EX)):\n",
    "        localvar.J_north=np.zeros(len(trafo))\n",
    "        localvar.J_east=np.zeros(len(trafo))\n",
    "        localvar.grid_EX=griddata((lat,lon),EX_matrix[localvar.time,:],(station_lat,station_lon),method='cubic')\n",
    "        localvar.grid_EY=griddata((lat,lon),EY_matrix[localvar.time,:],(station_lat,station_lon),method='cubic')\n",
    "#         logging.debug(f'Grid X is {localvar.grid_EX}')\n",
    "#         logging.debug(f'Grid Y is {localvar.grid_EY}')\n",
    "###################################### get electric potential between stations #####################################\n",
    "        logging.info(f'Thread {q} is acquiring potential for timestep {localvar.time}!')\n",
    "        print(f'Thread {q} is acquiring potential for timestep {localvar.time}!')\n",
    "        for localvar.row,localvar.line in enumerate(trafo_connect):\n",
    "            for localvar.column,localvar.item in enumerate(localvar.line):\n",
    "                if localvar.item:\n",
    "                    localvar.signlat=np.sign(trafo.at[localvar.row,'lat']-trafo.at[localvar.column,'lat'])\n",
    "                    localvar.signlon=np.sign(trafo.at[localvar.row,'lon']-trafo.at[localvar.column,'lon'])\n",
    "                    localvar.stat_voltN=localvar.signlat*((localvar.grid_EX[localvar.row]+localvar.grid_EX[localvar.column])/2.)*np.cos(math.radians(stat_heading[localvar.row,localvar.column]))*stat_length[localvar.row,localvar.column]\n",
    "                    localvar.stat_voltE=localvar.signlon*((localvar.grid_EY[localvar.row]+localvar.grid_EY[localvar.column])/2.)*np.sin(math.radians(stat_heading[localvar.row,localvar.column]))*stat_length[localvar.row,localvar.column]\n",
    "                    localvar.J_north[localvar.row]+=localvar.stat_voltN*trafo_cond[localvar.row,localvar.column]*-1*-1\n",
    "                    localvar.J_east[localvar.row]+=localvar.stat_voltE*trafo_cond[localvar.row,localvar.column]*-1*-1\n",
    "        localvar.J_total=localvar.J_north+localvar.J_east\n",
    "        localvar.volt_result=np.linalg.solve(trafo_cond,localvar.J_total)\n",
    "        localvar.I_GIC=localvar.volt_result*ground_cond\n",
    "        \n",
    "##################################### getting max I_GIC and writing results ########################################\n",
    "        logging.info(f'Thread {q} is writing results to files for timestep {localvar.time}!')\n",
    "        localvar.maxAMP=1\n",
    "        logging.debug(localvar.I_GIC)\n",
    "        if localvar.time<10:\n",
    "            localvar.tijd=f'000{localvar.time}'\n",
    "        elif localvar.time<100 and localvar.time>9:\n",
    "            localvar.tijd=f'00{localvar.time}'\n",
    "        elif localvar.time<1000 and localvar.time>99:\n",
    "            localvar.tijd=f'0{localvar.time}'\n",
    "        else:\n",
    "            localvar.tijd=f'{localvar.time}'\n",
    "        \n",
    "        ##### Save files #######\n",
    "        localvar.GIC=pd.DataFrame(columns=['lon','lat','GIC',f'GIC/{localvar.maxAMP}'])\n",
    "        GICmatrix=pd.DataFrame()\n",
    "        for localvar.i in range(len(trafo_connect)):\n",
    "            localvar.GIC.at[localvar.i,'lon']=station_lon[localvar.i]\n",
    "            localvar.GIC.at[localvar.i,'lat']=station_lat[localvar.i]\n",
    "            localvar.GIC.at[localvar.i,'GIC']=localvar.I_GIC[localvar.i]\n",
    "            localvar.GIC.at[localvar.i,f'GIC/{localvar.maxAMP}']=localvar.I_GIC[localvar.i]/localvar.maxAMP\n",
    "        localvar.GIC.to_csv(path_or_buf=f'{path}/GIC/TEST{localvar.tijd}.csv', sep=';', index=False, header=True)\n",
    "        \n",
    "################################### Plotting results ###############################################################\n",
    "        lim1=3.3\n",
    "        lim2=7.5\n",
    "        lim3=50.5\n",
    "        lim4=54\n",
    "        legendlon=lim1+0.18\n",
    "        legendlat=lim4-0.1\n",
    "        textlon=legendlon+0.40\n",
    "        textlat=legendlat-0.03\n",
    "\n",
    "        with lock:\n",
    "            legend=open(f'{path2}/legend.txt','w+')\n",
    "            legend.write(f'{legendlon} {legendlat} 1 1')\n",
    "            legend.close()\n",
    "            legendtxt=open(f'{path2}/legendtext.txt', 'w+')\n",
    "            legendtxt.write(f'{textlon} {textlat} {localvar.maxAMP}A')\n",
    "            legendtxt.close()\n",
    "\n",
    "            ##### Use GMT to plot GICs ######\n",
    "            minute=localvar.time%60\n",
    "            hour=int(localvar.time/60)\n",
    "            if minute < 10:\n",
    "                minute=f'0{minute}'\n",
    "            if hour < 10:\n",
    "                hour=f'0{hour}'\n",
    "            \n",
    "            title=f'GIC at 29-10-2003 - {hour}:{minute}'\n",
    "            proj='-JM15C -P'\n",
    "            lims=f'-R{lim1}/{lim2}/{lim3}/{lim4}'\n",
    "            psfile=f'{path}/GIC/GIC_at_{localvar.tijd}.ps' #aanpassen\n",
    "            pngfile=f'{path}/GIC/GIC_at_{localvar.tijd}.png' #aanpassen\n",
    "            os.system(f'gmt pscoast {proj} {lims} -W0.5p -K -Ggrey -Slightblue -Df -N1/0.25p> {psfile}' )\n",
    "            os.system(f'gmt psbasemap {proj} {lims} -Ba1g1 -BWeSn+t\"{title}\" -O -K>> {psfile}' )\n",
    "            os.system(f'gmt psxy {path2}/cables.csv {proj} {lims} -W0.5p -Wred -O -K>> {psfile}' )\n",
    "            os.system(f'gmt psxy {path}/GIC/GIC_{localvar.tijd}.csv {proj} {lims} -Ctopo.cpt -Scc -O -K>> {psfile}')    \n",
    "            os.system(f'gmt psxy {path2}/legend.txt {proj} {lims} -Ctopo.cpt -W -Scc -O -K>> {psfile}')\n",
    "            os.system(f'gmt pstext {path2}/legendtext.txt {proj} {lims} -F+f25pHelvetica,black -O>> {psfile}')\n",
    "        os.system(f'convert -density 300 {psfile} {pngfile}')\n",
    "        os.system(f'rm {psfile}')\n",
    "        logging.info(f'Thread {q} has fulfilled timestep {localvar.time}!')\n",
    "    logging.info(f'Thread {q} is finished!')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "path='/usr/people/out/Documents/Magnetic_field/station_results/31-10-2003'\n",
    "os.system(f'ffmpeg -framerate 24 -pattern_type glob -i \"{path}/GIC/GIC_at_????.png\" {path}/GIC.mp4')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot one station's timeseries\n",
    "import matplotlib\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "path='/usr/people/out/Documents/Magnetic_field/station_results/new_29-10-2003'\n",
    "os.system(f'ls {path}/GIC/*.csv > {path}/GIC.temp')\n",
    "f=open(f'{path}/GIC.temp')\n",
    "\n",
    "for counter,files in enumerate(f): #reading in data\n",
    "    files=files.strip('\\n')\n",
    "    newdata=pd.read_csv(files, delimiter=';')\n",
    "    numpydata=newdata.to_numpy()\n",
    "    if counter==0:\n",
    "        GIC_matrix=np.zeros((1440,len(numpydata)))\n",
    "    GIC_matrix[counter,:]=numpydata[:,2]\n",
    "os.system(f'rm {path}/GIC.temp')\n",
    "\n",
    "Time=np.linspace(0,24,1440)\n",
    "fig=plt.figure()\n",
    "ax=fig.add_subplot(111)\n",
    "ax.set_title('GIC at Eemshaven on 29-10-2003')\n",
    "ax.set_ylabel('Current (A)')\n",
    "ax.set_xlabel('Time (hours)')\n",
    "ax.plot(Time,GIC_matrix[:,0])\n",
    "plt.plot()\n",
    "fig=plt.figure()\n",
    "ax=fig.add_subplot(111)\n",
    "ax.set_title('GIC at Borssele on 29-10-2003')\n",
    "ax.set_ylabel('Current (A)')\n",
    "ax.set_xlabel('Time (hours)')\n",
    "ax.plot(Time,GIC_matrix[:,20])\n",
    "plt.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ObtainJ(kabels,EX_matrix,EY_matrix,lat,lon,time,trafo_connect):\n",
    "#     MEGACOUNTER=0\n",
    "    localvar.cablecheck=np.zeros(len(kabels))\n",
    "    localvar.E_kabels=np.zeros((len(kabels),2))         \n",
    "    localvar.E_kabels=calcE(kabels,EX_matrix,EY_matrix,lat,lon,time)\n",
    "    localvar.stat_voltN=np.zeros((len(trafo),len(trafo)))\n",
    "    localvar.stat_voltE=np.zeros((len(trafo),len(trafo)))\n",
    "    localvar.J_north=np.zeros(len(trafo))\n",
    "    localvar.J_east=np.zeros(len(trafo))\n",
    "    for localvar.row,localvar.line in enumerate(trafo_connect):\n",
    "#         NEWCOUNTER=0\n",
    "        ruleA=999\n",
    "        for localvar.column,localvar.item in enumerate(localvar.line):\n",
    "            if localvar.item:\n",
    "                for localvar.number in range(len(kabels)):\n",
    "                    localvar.cablecheck[localvar.number]=trafo_all_connections[localvar.row,localvar.number]+trafo_all_connections[localvar.column,localvar.number]\n",
    "                localvar.A=np.array(np.where(localvar.cablecheck==2)) #find indices that indicate cables connected\n",
    "\n",
    "                localvar.coord=trafo.at[localvar.row,'lat']\n",
    "#                 print(localvar.row, localvar.column, localvar.coord, localvar.A, len(localvar.A[0]))\n",
    "                for localvar.counter2 in range(len(localvar.A[0])): #double loop to check the cable connections\n",
    "#                     NEWCOUNTER+=1\n",
    "#                     MEGACOUNTER+=1\n",
    "                    for localvar.counter in range(len(localvar.A[0])):\n",
    "                        if abs(localvar.coord-kabels.at[localvar.A[0,localvar.counter],'strtlat'])<0.00001 and abs(ruleA-localvar.A[0,localvar.counter])>0.51: #check coord for which cable is connected and same cable is not allowed!\n",
    "                            localvar.coord=kabels.at[localvar.A[0,localvar.counter],'eindlat']\n",
    "                            ruleA=localvar.A[0,localvar.counter] #rule to ensure that the same cable is not picked again\n",
    "#                             MEGACOUNTER+=1\n",
    "#                             print(localvar.row,localvar.column, localvar.coord)\n",
    "                            # first North component\n",
    "                            if kabels.at[localvar.A[0,localvar.counter],'strtlat'] < kabels.at[localvar.A[0,localvar.counter],'eindlat']:\n",
    "                                localvar.stat_voltN[localvar.row,localvar.column]+=localvar.E_kabels[localvar.A[0,localvar.counter],0]*-1\n",
    "                            else:\n",
    "                                localvar.stat_voltN[localvar.row,localvar.column]+=localvar.E_kabels[localvar.A[0,localvar.counter],0]\n",
    "                            # now East component    \n",
    "                            if kabels.at[localvar.A[0,localvar.counter],'strtlon'] < kabels.at[localvar.A[0,localvar.counter],'eindlon']:\n",
    "                                localvar.stat_voltE[localvar.row,localvar.column]+=localvar.E_kabels[localvar.A[0,localvar.counter],1]*-1\n",
    "                            else:\n",
    "                                localvar.stat_voltE[localvar.row,localvar.column]+=localvar.E_kabels[localvar.A[0,localvar.counter],1]\n",
    "                            break                           \n",
    "                        elif abs(localvar.coord-kabels.at[localvar.A[0,localvar.counter],'eindlat'])<0.00001 and abs(ruleA-localvar.A[0,localvar.counter])>0.51:\n",
    "                            ruleA=localvar.A[0,localvar.counter]\n",
    "#                             MEGACOUNTER+=1\n",
    "                            localvar.coord=kabels.at[localvar.A[0,localvar.counter],'strtlat']\n",
    "#                             print(localvar.row, localvar.column, localvar.coord)\n",
    "                            # first North component\n",
    "                            if kabels.at[localvar.A[0,localvar.counter],'strtlat'] < kabels.at[localvar.A[0,localvar.counter],'eindlat']:\n",
    "                                localvar.stat_voltN[localvar.row,localvar.column]+=localvar.E_kabels[localvar.A[0,localvar.counter],0]\n",
    "                            else:\n",
    "                                localvar.stat_voltN[localvar.row,localvar.column]+=localvar.E_kabels[localvar.A[0,localvar.counter],0]*-1\n",
    "                            # now East component    \n",
    "                            if kabels.at[localvar.A[0,localvar.counter],'strtlon'] < kabels.at[localvar.A[0,localvar.counter],'eindlon']:\n",
    "                                localvar.stat_voltE[localvar.row,localvar.column]+=localvar.E_kabels[localvar.A[0,localvar.counter],1]\n",
    "                            else:\n",
    "                                localvar.stat_voltE[localvar.row,localvar.column]+=localvar.E_kabels[localvar.A[0,localvar.counter],1]*-1\n",
    "                            break\n",
    "                        else:\n",
    "                            pass\n",
    "#         print(localvar.row,NEWCOUNTER)\n",
    "#     print(f'Amount of cables is {MEGACOUNTER/2}')\n",
    "#                         else:\n",
    "#                             print(localvar.row, localvar.column, 'error')\n",
    "    for localvar.row,localvar.line in enumerate(trafo_connect):\n",
    "        for localvar.column,localvar.item in enumerate(localvar.line):\n",
    "            localvar.J_north[localvar.row]+=localvar.stat_voltN[localvar.row,localvar.column]*trafo_cond[localvar.row,localvar.column]*-1*-1 #extra -1 -1 to get J in opposite direction of E\n",
    "            localvar.J_east[localvar.row]+=localvar.stat_voltE[localvar.row,localvar.column]*trafo_cond[localvar.row,localvar.column]*-1*-1\n",
    "    return localvar.J_north, localvar.J_east"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calcE(kabels,EX_matrix,EY_matrix,lat,lon,time): #E for all cables\n",
    "    from scipy.interpolate import griddata\n",
    "    from scipy.integrate import simps\n",
    "    localvar.heading=np.zeros(len(kabels))\n",
    "    localvar.old=np.zeros((len(kabels),2))\n",
    "    nr=40 # amount of nodes\n",
    "    while True:\n",
    "        localvar.E_all=np.zeros((len(kabels),2))\n",
    "        localvar.latrange=np.zeros((len(kabels),nr))\n",
    "        localvar.lonrange=np.zeros((len(kabels),nr))\n",
    "        localvar.GridEX=np.zeros((len(kabels),nr))\n",
    "        localvar.GridEY=np.zeros((len(kabels),nr))\n",
    "    \n",
    "        for number in range(len(kabels)):\n",
    "            localvar.latrange[number,:]=np.linspace(kabels.at[number,'strtlat'],kabels.at[number,'eindlat'],nr) \n",
    "            localvar.lonrange[number,:]=np.linspace(kabels.at[number,'strtlon'],kabels.at[number,'eindlon'],nr) \n",
    "            localvar.heading[number]=kabels.at[number,'heading']\n",
    "        localvar.GridEX=griddata((lat,lon),EX_matrix[time,:],(localvar.latrange,localvar.lonrange),method='cubic') #interpolate value\n",
    "        localvar.GridEY=griddata((lat,lon),EY_matrix[time,:],(localvar.latrange,localvar.lonrange),method='cubic')\n",
    "        for number in range(len(kabels)):\n",
    "            localvar.E_all[number,0]+=abs(np.cos(np.radians(localvar.heading[number])))*simps(localvar.GridEX[number,:],np.linspace(0,kabels.at[number,'length'],nr))\n",
    "            localvar.E_all[number,1]+=abs(np.sin(np.radians(localvar.heading[number])))*simps(localvar.GridEY[number,:],np.linspace(0,kabels.at[number,'length'],nr))\n",
    "        print(nr, np.sum(abs(localvar.old-localvar.E_all)))\n",
    "        if np.sum(abs(localvar.old-localvar.E_all))<10**-5:\n",
    "            print('Iterations used', nr-1)\n",
    "            break\n",
    "        else:\n",
    "            localvar.old[:,0]=localvar.E_all[:,0]\n",
    "            localvar.old[:,1]=localvar.E_all[:,1]\n",
    "            nr+=1\n",
    "    return localvar.E_all"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "40 57.69237599076081\n",
      "41 6.037880696519738e-06\n",
      "Iterations used 40\n",
      "[[ 9.42989432e-02 -2.59435712e-02]\n",
      " [ 9.09133930e-02 -3.27485839e-02]\n",
      " [ 2.71771721e-02 -1.02343062e-01]\n",
      " [ 5.73622581e-03 -2.21413366e-02]\n",
      " [ 2.76492019e-01 -4.43910738e-02]\n",
      " [ 1.59124096e-01 -2.64502737e-01]\n",
      " [ 6.26773989e-02 -1.86281938e-01]\n",
      " [ 2.84316795e-02 -1.26957775e-01]\n",
      " [ 9.56468055e-02 -1.12319404e-03]\n",
      " [ 5.61500529e-02 -9.21788910e-02]\n",
      " [ 3.64343043e-02 -1.08769715e-01]\n",
      " [ 6.58213858e-02 -7.03802534e-02]\n",
      " [ 3.44236366e-02 -1.07759896e-01]\n",
      " [ 8.36973029e-02 -9.71910638e-03]\n",
      " [ 1.09022443e-01 -1.16574326e-01]\n",
      " [ 1.45181752e-01 -4.00805601e-02]\n",
      " [ 1.01071957e-01 -1.44107184e-01]\n",
      " [ 1.17449140e-01 -1.29551786e-02]\n",
      " [ 1.66805889e-01 -1.90974861e-01]\n",
      " [ 9.77903441e-02 -6.90703346e-02]\n",
      " [ 2.99573408e-02 -7.61307724e-02]\n",
      " [ 5.91673690e-02 -3.72928707e-02]\n",
      " [ 2.22537362e-02 -4.44619008e-02]\n",
      " [ 3.16024065e-02 -6.88697784e-02]\n",
      " [ 2.53981976e-03 -8.09633024e-02]\n",
      " [ 9.47024321e-02 -1.65202717e-01]\n",
      " [ 4.44072348e-02 -1.53312935e-01]\n",
      " [ 5.79335819e-02 -1.44432826e-01]\n",
      " [ 7.26042485e-02 -6.90515404e-02]\n",
      " [ 5.71397957e-02 -1.12161548e-01]\n",
      " [ 1.02073143e-01 -1.77527489e-02]\n",
      " [ 6.19044111e-02 -1.94488355e-01]\n",
      " [ 1.50254690e-01 -3.64549016e-02]\n",
      " [ 3.63532975e-02 -2.13633780e-01]\n",
      " [ 3.04588025e-02 -2.15730770e-01]\n",
      " [ 1.93394168e-02 -1.34626078e-01]\n",
      " [ 2.23824863e-02 -1.33530001e-01]\n",
      " [ 3.84220510e-02 -1.26389442e-01]\n",
      " [ 8.19682914e-02 -2.57524107e-01]\n",
      " [ 2.01881174e-01 -7.10033147e-03]\n",
      " [ 4.08473131e-02 -5.42362760e-03]\n",
      " [ 1.37399729e-01 -6.37674318e-03]\n",
      " [ 2.83780152e-02 -1.84871978e-01]\n",
      " [ 6.29072725e-02 -8.65752057e-02]\n",
      " [ 6.14374903e-02 -2.76020170e-01]\n",
      " [ 4.73446528e-02 -2.45773508e-01]\n",
      " [ 2.48755140e-02 -2.49598315e-01]\n",
      " [ 1.94675090e-02 -9.14364004e-02]\n",
      " [ 1.32258985e-01 -8.89818724e-02]\n",
      " [ 1.63583630e-02 -2.02942996e-01]\n",
      " [ 1.97548773e-01 -4.57378906e-01]\n",
      " [ 1.77990637e-01 -2.07145606e-01]\n",
      " [ 3.61986913e-02 -2.04183323e-01]\n",
      " [ 2.11049517e-01 -3.77349146e-01]\n",
      " [ 1.96553714e-01 -2.89890894e-03]\n",
      " [ 1.48762234e-01 -1.68010627e-01]\n",
      " [ 1.93731682e-01 -7.56945338e-03]\n",
      " [ 1.43406493e-02 -1.70606227e-01]\n",
      " [ 5.09155360e-02 -1.54521043e-01]\n",
      " [ 1.95645745e-01 -2.15792650e-01]\n",
      " [ 1.60826495e-01 -1.28683967e-02]\n",
      " [ 5.10381613e-02 -1.91220314e-01]\n",
      " [ 8.47373406e-02 -1.68722553e-01]\n",
      " [ 1.48830076e-01 -8.12456064e-02]\n",
      " [ 2.98403675e-02 -1.43914362e-01]\n",
      " [ 5.00363230e-02 -1.42807979e-01]\n",
      " [ 1.13884353e-01 -1.87362497e-03]\n",
      " [ 3.91776762e-01 -2.85213004e-02]\n",
      " [ 2.30513941e-01 -2.05903663e-02]\n",
      " [ 1.00541993e-01 -5.52223813e-03]\n",
      " [ 9.02221007e-02 -2.02361404e-02]\n",
      " [ 1.21153567e-01 -1.99321805e-03]\n",
      " [ 6.10868073e-02 -1.46734788e-01]\n",
      " [ 3.06073816e-01 -2.45675598e-02]\n",
      " [ 3.20926285e-01 -1.20539529e-02]\n",
      " [ 3.97489639e-02 -1.74864272e-02]\n",
      " [ 3.95148740e-02 -9.33774116e-02]\n",
      " [ 1.87946773e-02 -1.07303009e-01]\n",
      " [ 1.25746225e-01 -2.61155501e-01]\n",
      " [ 3.42783997e-01 -5.05560902e-03]\n",
      " [ 9.34242255e-02 -1.05512258e-01]\n",
      " [ 1.21665830e-01 -4.75370792e-03]\n",
      " [ 5.11908276e-04 -1.82129965e-03]\n",
      " [ 2.90311249e-02 -1.84655147e-01]\n",
      " [ 4.40852294e-04 -3.54954669e-04]\n",
      " [ 3.66433882e-02 -3.08484723e-01]\n",
      " [ 1.31996331e-01 -1.24503634e-01]\n",
      " [ 1.69645836e-01 -1.82332364e-02]\n",
      " [ 1.20904628e-01 -1.63754963e-02]\n",
      " [ 9.30705537e-04 -1.53618355e-01]\n",
      " [ 1.60658725e-02 -4.96527497e-02]\n",
      " [ 5.12758473e-02 -5.25812120e-02]\n",
      " [ 7.61285193e-02 -2.00743337e-02]\n",
      " [ 2.42211459e-01 -2.67494381e-02]\n",
      " [ 1.08037056e-01 -7.29935806e-03]\n",
      " [ 5.56696698e-02 -7.59219207e-02]\n",
      " [ 6.81698015e-02 -9.31753695e-03]\n",
      " [ 7.76377866e-03 -5.87048859e-02]\n",
      " [ 8.83934279e-03 -6.78909187e-02]\n",
      " [ 7.32514072e-02 -2.59545131e-02]\n",
      " [ 5.98250712e-02 -1.83512947e-01]\n",
      " [ 6.23443281e-02 -1.50515089e-01]\n",
      " [ 2.83717819e-01 -4.02167896e-02]\n",
      " [ 4.54255553e-02 -7.07322916e-02]\n",
      " [ 6.30366782e-02 -6.79508527e-02]\n",
      " [ 1.33411639e-01 -1.48162493e-02]\n",
      " [ 3.99371874e-04 -8.29991302e-04]\n",
      " [ 2.21977525e-01 -1.97552934e-01]\n",
      " [ 6.32869543e-04 -2.20769461e-04]\n",
      " [ 1.70564574e-02 -1.79636348e-01]\n",
      " [ 7.00543195e-02 -4.80385625e-01]\n",
      " [ 3.27847358e-03 -1.95440526e-01]\n",
      " [ 1.36336348e-01 -4.04496218e-02]\n",
      " [ 3.57076092e-03 -6.84170541e-02]\n",
      " [ 7.53327644e-03 -1.27709215e-01]\n",
      " [ 1.38620804e-01 -4.07631036e-02]\n",
      " [ 5.30392455e-02 -1.89084935e-01]\n",
      " [ 1.18089292e-01 -1.03248786e-01]\n",
      " [ 2.02742329e-02 -2.04523627e-01]\n",
      " [ 3.19994160e-01 -1.31160530e-01]\n",
      " [ 1.85204943e-01 -2.87982307e-01]\n",
      " [ 4.43699907e-01 -2.90508345e-01]\n",
      " [ 3.62621139e-02 -9.25667814e-02]\n",
      " [ 3.83083523e-02 -6.30258879e-02]\n",
      " [ 3.83760947e-02 -6.29173163e-02]\n",
      " [ 3.62621139e-02 -9.25667814e-02]\n",
      " [ 9.00852009e-02 -2.79901491e-01]\n",
      " [ 1.55105664e-04 -2.49517666e-04]\n",
      " [ 1.96180023e-02 -1.76733768e-01]\n",
      " [ 4.40443148e-02 -3.17940776e-02]\n",
      " [ 7.83007344e-02 -4.29831163e-02]\n",
      " [ 1.94759862e-03 -1.89373517e-04]\n",
      " [ 9.34984265e-03 -6.83630625e-02]\n",
      " [ 1.52197781e-02 -1.36101599e-01]\n",
      " [ 2.45401901e-02 -9.49107989e-03]\n",
      " [ 5.59553731e-02 -4.49577871e-04]\n",
      " [ 8.60472233e-02 -4.49869550e-02]\n",
      " [ 8.59950875e-02 -4.52136300e-02]\n",
      " [ 1.55272576e-02 -1.36018708e-01]\n",
      " [ 3.48249753e-02 -6.13231349e-02]\n",
      " [ 2.59306444e-02 -4.36222838e-02]\n",
      " [ 1.66164177e-02 -5.31389249e-02]\n",
      " [ 1.04181163e-01 -3.99709088e-02]\n",
      " [ 5.38489980e-02 -2.94383906e-02]\n",
      " [ 1.10776118e-02 -3.54259499e-02]\n",
      " [ 3.40064681e-06 -5.88447684e-06]\n",
      " [ 4.64185949e-02 -8.37577157e-02]\n",
      " [ 6.94708239e-02 -8.28400460e-03]\n",
      " [ 7.85859081e-02 -5.34636451e-02]\n",
      " [ 1.00669226e-01 -2.32095288e-02]\n",
      " [ 3.10407696e-02 -5.51244442e-02]\n",
      " [ 1.36896387e-01 -1.00325107e-01]\n",
      " [ 1.36896387e-01 -1.00325107e-01]\n",
      " [ 6.68017544e-02 -7.22870154e-02]\n",
      " [ 1.49875152e-02 -5.66626573e-02]\n",
      " [ 2.88099333e-02 -4.23203914e-02]\n",
      " [ 3.55194488e-03 -1.39912307e-01]\n",
      " [ 5.87439965e-02 -3.42273977e-02]\n",
      " [ 4.71805472e-02 -8.58296313e-02]\n",
      " [ 1.63985600e-02 -4.93597226e-02]\n",
      " [ 5.11362881e-02 -3.79402598e-03]\n",
      " [ 1.69850404e-01 -5.15211970e-02]\n",
      " [ 4.32499197e-02 -1.73796374e-01]\n",
      " [ 2.53043240e-02 -6.30996636e-02]\n",
      " [ 1.47711190e-01 -1.83469213e-01]\n",
      " [ 6.44458420e-02 -2.09468346e-02]\n",
      " [ 4.60631809e-02 -8.68098215e-02]\n",
      " [ 5.31219116e-02 -2.38566271e-01]\n",
      " [ 1.60636590e-02 -5.78544612e-01]\n",
      " [ 2.82619892e-01 -3.91685976e-01]\n",
      " [ 2.79499072e-01 -5.22943938e-01]\n",
      " [ 1.01879605e-01 -1.66189238e-01]\n",
      " [ 6.46620824e-02 -9.83132114e-02]\n",
      " [ 1.06052655e-01 -4.16782145e-01]\n",
      " [ 7.34520771e-02 -2.96850914e-01]\n",
      " [ 1.45863293e-01 -1.87005706e-01]\n",
      " [ 1.44342117e-01 -1.90634841e-01]\n",
      " [ 2.17997204e-01 -1.36018408e-01]\n",
      " [ 1.59394949e-01 -1.71807019e-01]\n",
      " [ 1.80001926e-01 -2.42867633e-01]\n",
      " [ 2.72228330e-01 -3.38540826e-01]\n",
      " [ 3.36808274e-02 -2.77313785e-01]\n",
      " [ 1.49330275e-01 -9.94351728e-02]\n",
      " [ 5.15537690e-02 -4.24472078e-01]\n",
      " [ 1.84134912e-01 -1.68510469e-01]\n",
      " [ 3.92842601e-02 -3.89904321e-02]\n",
      " [ 2.53667984e-02 -6.29942496e-02]\n",
      " [ 3.13689013e-01 -2.63520619e-01]\n",
      " [ 3.13096638e-01 -2.65358826e-01]\n",
      " [ 2.46480220e-04 -1.82936124e-03]\n",
      " [ 1.86584817e-01 -4.48788948e-01]\n",
      " [ 1.85727636e-01 -4.49981512e-01]\n",
      " [ 2.81268076e-02 -9.73171502e-02]\n",
      " [ 4.59206536e-02 -1.80436185e-01]\n",
      " [ 3.58349881e-01 -5.55298769e-02]\n",
      " [ 1.23014273e-03 -4.64584990e-04]\n",
      " [ 3.46314453e-01 -4.19086722e-02]\n",
      " [ 1.82750533e-01 -3.30375400e-01]\n",
      " [ 2.69383729e-01 -1.54236365e-01]\n",
      " [ 4.74592576e-01 -4.89307411e-01]\n",
      " [ 3.18699673e-03 -2.01817070e-01]\n",
      " [ 6.82360689e-02 -2.10599586e-01]\n",
      " [ 2.67476546e-02 -4.32909890e-01]\n",
      " [ 1.44708409e-02 -3.06438198e-01]\n",
      " [ 7.25522408e-04 -1.40191075e-03]\n",
      " [ 1.30633652e-02 -1.25863386e-01]\n",
      " [ 9.29534896e-02 -1.02428737e-02]\n",
      " [ 1.14318234e-03 -9.83513443e-02]\n",
      " [ 6.49315496e-02 -1.66148945e-02]\n",
      " [ 9.52202272e-02 -2.52548644e-04]\n",
      " [ 8.32626159e-02 -6.70374790e-03]\n",
      " [ 4.14939315e-02 -6.95841632e-02]\n",
      " [ 1.89120222e-01 -9.01954793e-02]\n",
      " [ 1.38219013e-01 -3.72226377e-02]\n",
      " [ 1.20804919e-01 -1.08581094e-01]\n",
      " [ 7.42024961e-03 -1.05167803e-02]\n",
      " [ 4.59675792e-18 -1.16059372e-01]\n",
      " [ 4.11088914e-02 -2.82662991e-02]\n",
      " [ 1.45360226e-02 -5.22222965e-01]\n",
      " [ 3.72355100e-03 -4.07441138e-01]\n",
      " [ 1.98740035e-02 -2.97456020e-01]\n",
      " [ 1.65580421e-02 -1.09468566e-02]\n",
      " [ 1.97420315e-01 -1.73901536e-01]\n",
      " [ 3.01818821e-01 -3.40410707e-01]\n",
      " [ 9.86399416e-02 -3.85197519e-01]\n",
      " [ 6.36892147e-01 -3.81038713e-02]\n",
      " [ 2.08553910e-02 -1.31858073e-01]\n",
      " [ 1.43848931e-01 -1.24670283e-01]\n",
      " [ 9.50859697e-02 -1.99190252e-01]\n",
      " [ 9.46096823e-02 -1.97457180e-01]\n",
      " [ 1.50207381e-01 -9.31245675e-02]\n",
      " [ 1.49775292e-01 -1.29806512e-01]\n",
      " [ 1.72413527e-01 -2.01711912e-02]\n",
      " [ 2.55820095e-02 -4.29109877e-02]\n",
      " [ 1.58513882e-01 -1.54721251e-01]\n",
      " [ 2.90935762e-01 -2.00511715e+00]\n",
      " [ 3.47603710e+00  0.00000000e+00]]\n"
     ]
    }
   ],
   "source": [
    "E_kabels=np.zeros((len(kabels),2))                \n",
    "E_kabels=calcE(kabels,EX_matrix,EY_matrix,lat,lon,1300)\n",
    "print(E_kabels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(array([ 6.64807950e-01, -2.28432112e-01,  2.26505246e-01, -3.36336218e-01,\n",
      "       -4.09090009e-03,  1.67054919e-02, -4.01226829e-02,  2.09462860e-02,\n",
      "        1.26084631e-02, -7.33703230e-03, -1.48097120e-02,  1.32798628e-02,\n",
      "        2.78243519e-02, -8.58216400e-02, -2.06924192e-02,  5.44205351e-02,\n",
      "       -8.08290429e-02,  6.28667603e-02,  6.05333152e-03,  1.72423421e-02,\n",
      "        3.62372888e-03, -3.19700015e-03, -1.40500879e-02,  1.19398425e-02,\n",
      "        1.06403497e-04,  1.31673838e-03, -2.04997910e-03,  5.75134529e-03,\n",
      "       -4.70901703e-02,  1.30814430e-02, -2.72012212e-02,  1.31502155e-01,\n",
      "        8.57156762e-02,  1.35005299e-01,  4.96681920e-02,  4.19791203e-02,\n",
      "       -2.61268965e-02,  1.59340814e-01,  1.58829415e-03,  1.41339481e-01,\n",
      "        2.40139163e-01, -2.54817492e-01,  4.57225782e-02, -9.22988568e-03,\n",
      "        1.91198274e-02,  1.42482557e-03, -4.56265583e-02, -2.10574434e-02,\n",
      "       -1.72963149e-02,  4.23533614e-02,  7.37569296e-02,  3.10551496e-02,\n",
      "        2.35540068e-02, -1.74541391e-01,  2.83471958e-01,  1.02210473e-01,\n",
      "       -2.72408869e-01,  9.12474878e-03,  1.46237494e-01, -1.50247229e-02,\n",
      "        5.01910004e-03, -2.09571137e-01, -1.32638681e-01,  2.18538901e-02,\n",
      "       -1.46121894e-02, -5.67945530e-02,  7.23181391e-02,  2.38299719e-02,\n",
      "        2.20798109e-03, -3.27282923e-02,  5.03313877e-02, -1.75765138e-01,\n",
      "       -2.75324179e-01,  7.66593866e-02,  2.23478457e-01, -5.63342628e-03,\n",
      "       -4.81169125e-03,  3.60252076e-02, -2.50207134e-01, -5.60558672e-02,\n",
      "       -1.16177097e-02, -1.35723989e-02, -1.95625039e-01, -1.57948871e-01,\n",
      "        1.64503685e-01,  7.94022819e-02, -1.19452921e-01, -1.77472632e-02,\n",
      "       -5.01304446e-02, -4.67159079e-04, -6.34521208e-02, -3.27639687e-03,\n",
      "       -1.14946547e-01,  5.25029578e-02, -1.39106289e-01,  1.12374105e-01,\n",
      "        8.61531715e-02, -9.04135861e-02,  3.75071393e-02, -4.08440145e-02,\n",
      "       -2.35459087e-02,  2.92617494e-02,  1.69348484e-01,  1.55656380e-01,\n",
      "        1.17196816e-01, -1.36338705e-01, -1.56605931e-01, -1.24432802e-02,\n",
      "       -1.81342599e-02, -3.00989835e-02, -1.03630467e-02, -4.79102048e-02,\n",
      "       -1.87946351e-02, -2.38102615e-02, -2.67146719e-02, -2.29278360e-02,\n",
      "        6.57621732e-02, -1.02518578e-01, -4.43231337e-02, -3.41303472e-03,\n",
      "       -2.39671065e-02, -4.47859884e-04, -1.70038330e-02,  5.34485652e-03,\n",
      "       -1.10558506e-02,  8.38277539e-03,  4.12999061e-03,  1.26448615e-03,\n",
      "        1.06149073e-02, -3.02405468e-02,  1.71915741e-02, -1.73999873e-02,\n",
      "       -7.43210752e-02,  8.85156576e-02,  5.87504664e-03,  9.68432169e-03,\n",
      "       -2.98283585e-02,  1.51442478e-02, -3.72792179e-02, -2.44263469e-03,\n",
      "        1.48706331e-02, -1.57028686e-02,  1.09272460e-02, -2.13742294e-02,\n",
      "        6.98036951e-03,  8.11286485e-04,  1.37835794e-02,  1.15278168e-01,\n",
      "        1.06357602e-01]), array([ 1.97538799e-01, -4.58003303e-01,  4.19732350e-01, -1.34854677e-01,\n",
      "       -1.28414431e+00, -5.20185973e-01, -2.78240889e-01,  9.22377368e-01,\n",
      "       -1.60939393e+00,  2.86913714e-01,  4.26724311e-01, -1.67332511e+00,\n",
      "        2.41355389e+00, -1.94328337e+00,  8.10671857e-01,  4.71472758e-01,\n",
      "       -5.16866335e+00, -4.25949641e-01,  4.71452805e+00, -4.43734016e-01,\n",
      "       -1.33414335e+00,  3.37360575e-01,  1.19953948e-01, -1.17714834e-02,\n",
      "        6.40755165e-01,  2.92547178e-01, -1.22262784e-02, -1.84772234e+00,\n",
      "        2.93004638e+00,  9.27678741e-01, -2.49485201e-01,  8.37028153e-01,\n",
      "       -1.76865829e+00, -6.80879979e-01, -6.48788561e-01, -3.08062609e-01,\n",
      "        8.07944105e-01, -1.00221460e+00, -1.82247274e-02, -4.66787882e-01,\n",
      "       -1.30425642e-01,  1.90244975e+00,  3.41387039e-01, -3.30496853e-01,\n",
      "        5.84905601e-01, -7.26268786e-02,  5.76427197e-01,  2.79206001e-01,\n",
      "        4.37055790e-01, -1.42435047e-01, -9.37870610e-01, -1.73036831e-01,\n",
      "        9.02856672e-01,  6.04318501e-01,  5.84512215e-01, -1.27214942e+00,\n",
      "       -9.82924134e-02, -3.57252620e-01, -5.14980293e-01,  1.82354754e+00,\n",
      "        1.21799225e+00, -6.11220569e-01,  8.23651691e-01, -1.48864473e+00,\n",
      "        8.58389344e-01,  5.04387574e-01,  5.89068315e-01,  1.64488662e-01,\n",
      "       -5.42334855e-01, -3.43580534e-01,  1.96857585e-01, -2.88064252e-01,\n",
      "        2.02790220e+00,  7.69392087e-01, -1.45627918e-01,  1.12167914e-01,\n",
      "       -5.44618069e-01,  2.22859765e+00,  1.00176438e-01, -1.72241055e+00,\n",
      "       -3.70034376e-01, -2.28348217e-01,  6.76167836e-01, -3.84564760e-01,\n",
      "        1.07085357e+00, -6.71143328e-01, -8.40787603e-01,  4.53660873e-01,\n",
      "        7.78517667e-01, -1.69961361e+00,  6.01956173e-01, -1.14936996e-01,\n",
      "        8.64795017e-01, -2.26570087e+00,  9.72874773e-01, -2.40432746e+00,\n",
      "        4.36508099e-02,  3.87796522e-01,  5.80436512e-01,  1.48547029e-01,\n",
      "       -6.05928056e-01,  1.62675410e+00,  5.89300799e-02, -5.89139807e-02,\n",
      "       -4.12204278e-01,  1.45048984e+00,  1.02425914e+00, -7.15997131e-02,\n",
      "       -1.41504129e+00,  7.10596943e-01,  7.01344560e-01, -2.39573158e+00,\n",
      "        1.61286307e+00,  1.68041934e+00, -8.55864320e-01, -8.73248393e-01,\n",
      "        8.33709764e-01, -4.73700026e-01, -1.58108747e+00,  4.61094234e-01,\n",
      "        9.19050957e-01,  2.30026590e+00, -2.25991527e+00, -1.23485155e+00,\n",
      "        3.07633063e-01, -3.09737085e-01, -8.64777708e-01,  7.85396246e-01,\n",
      "       -7.91500573e-02,  1.16946084e-01, -4.75886403e-01,  3.73131233e-01,\n",
      "        5.05633685e-01, -1.16722392e+00,  7.02912764e-01,  1.38965210e+00,\n",
      "       -2.69612492e-02,  1.76586781e-01, -5.48491257e-01, -4.09180963e-03,\n",
      "       -2.99464677e-01,  2.93895035e-01, -9.72780518e-02, -9.99302397e-01,\n",
      "       -7.38935566e-01,  5.00449015e-01, -5.14982099e-01,  0.00000000e+00,\n",
      "       -9.49198701e-01]))\n"
     ]
    }
   ],
   "source": [
    "J_kabels=np.zeros((len(kabels),2)) \n",
    "J_kabels=ObtainJ(kabels,EX_matrix,EY_matrix,lat,lon,0,trafo_connect)\n",
    "print(J_kabels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0 has no problems\n",
      "1.0 has no problems\n",
      "2.0 has no problems\n",
      "3.0 has no problems\n",
      "4.0 has no problems\n",
      "5.0 has no problems\n",
      "6.0 has no problems\n",
      "7.0 has no problems\n",
      "8.0 has no problems\n",
      "9.0 has no problems\n",
      "10.0 has no problems\n",
      "11.0 has no problems\n",
      "12.0 has no problems\n",
      "13.0 has no problems\n",
      "14.0 has no problems\n",
      "15.0 has no problems\n",
      "16.0 has no problems\n",
      "17.0 has no problems\n",
      "18.0 has no problems\n",
      "19.0 has no problems\n",
      "20.0 has no problems\n",
      "21.0 has no problems\n",
      "22.0 has no problems\n",
      "23.0 has no problems\n",
      "24.0 has no problems\n",
      "25.0 has no problems\n",
      "26.0 has no problems\n",
      "27.0 has no problems\n",
      "28.0 has no problems\n",
      "29.0 has no problems\n",
      "30.0 has no problems\n",
      "31.0 has no problems\n",
      "32.0 has no problems\n",
      "33.0 has no problems\n",
      "34.0 has no problems\n",
      "35.0 has no problems\n",
      "36.0 has no problems\n",
      "Hey, station 37.0 is incorrect, has now 10.0 cables, but should be 11.0!\n",
      "38.0 has no problems\n",
      "39.0 has no problems\n",
      "40.0 has no problems\n",
      "41.0 has no problems\n",
      "42.0 has no problems\n",
      "43.0 has no problems\n",
      "44.0 has no problems\n",
      "45.0 has no problems\n",
      "46.0 has no problems\n",
      "47.0 has no problems\n",
      "48.0 has no problems\n",
      "49.0 has no problems\n",
      "50.0 has no problems\n",
      "51.0 has no problems\n",
      "52.0 has no problems\n",
      "53.0 has no problems\n",
      "54.0 has no problems\n",
      "55.0 has no problems\n",
      "56.0 has no problems\n",
      "57.0 has no problems\n",
      "58.0 has no problems\n",
      "59.0 has no problems\n",
      "60.0 has no problems\n",
      "61.0 has no problems\n",
      "62.0 has no problems\n",
      "63.0 has no problems\n",
      "64.0 has no problems\n",
      "65.0 has no problems\n",
      "66.0 has no problems\n",
      "67.0 has no problems\n",
      "68.0 has no problems\n",
      "69.0 has no problems\n",
      "70.0 has no problems\n",
      "71.0 has no problems\n",
      "72.0 has no problems\n",
      "73.0 has no problems\n",
      "74.0 has no problems\n",
      "75.0 has no problems\n",
      "76.0 has no problems\n",
      "77.0 has no problems\n",
      "78.0 has no problems\n",
      "79.0 has no problems\n",
      "80.0 has no problems\n",
      "81.0 has no problems\n",
      "82.0 has no problems\n",
      "83.0 has no problems\n",
      "84.0 has no problems\n",
      "85.0 has no problems\n",
      "86.0 has no problems\n",
      "87.0 has no problems\n",
      "88.0 has no problems\n",
      "89.0 has no problems\n",
      "90.0 has no problems\n",
      "91.0 has no problems\n",
      "92.0 has no problems\n",
      "93.0 has no problems\n",
      "94.0 has no problems\n",
      "95.0 has no problems\n",
      "96.0 has no problems\n",
      "97.0 has no problems\n",
      "98.0 has no problems\n",
      "99.0 has no problems\n",
      "100.0 has no problems\n",
      "101.0 has no problems\n",
      "102.0 has no problems\n",
      "103.0 has no problems\n",
      "104.0 has no problems\n",
      "105.0 has no problems\n",
      "106.0 has no problems\n",
      "107.0 has no problems\n",
      "108.0 has no problems\n",
      "109.0 has no problems\n",
      "110.0 has no problems\n",
      "111.0 has no problems\n",
      "112.0 has no problems\n",
      "113.0 has no problems\n",
      "114.0 has no problems\n",
      "115.0 has no problems\n",
      "116.0 has no problems\n",
      "117.0 has no problems\n",
      "118.0 has no problems\n",
      "119.0 has no problems\n",
      "120.0 has no problems\n",
      "121.0 has no problems\n",
      "122.0 has no problems\n",
      "123.0 has no problems\n",
      "124.0 has no problems\n",
      "125.0 has no problems\n",
      "126.0 has no problems\n",
      "127.0 has no problems\n",
      "128.0 has no problems\n",
      "129.0 has no problems\n",
      "130.0 has no problems\n",
      "131.0 has no problems\n",
      "132.0 has no problems\n",
      "133.0 has no problems\n",
      "134.0 has no problems\n",
      "135.0 has no problems\n",
      "136.0 has no problems\n",
      "137.0 has no problems\n",
      "138.0 has no problems\n",
      "139.0 has no problems\n",
      "140.0 has no problems\n",
      "141.0 has no problems\n",
      "142.0 has no problems\n",
      "143.0 has no problems\n",
      "144.0 has no problems\n",
      "145.0 has no problems\n",
      "146.0 has no problems\n",
      "147.0 has no problems\n",
      "148.0 has no problems\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "station=np.zeros(149)\n",
    "cable=np.zeros(149)\n",
    "ob_cable=np.zeros(149)\n",
    "path='/usr/people/out/Documents'\n",
    "f=open(f'{path}/original')\n",
    "g=open(f'{path}/obtained_cable')\n",
    "for counter,item in enumerate(f):\n",
    "    item=item.split(' ')\n",
    "    station[counter]=item[0]\n",
    "    cable[counter]=item[1]\n",
    "for counter,item in enumerate(g):\n",
    "    item=item.split(' ')\n",
    "    ob_cable[counter]=item[1]\n",
    "    \n",
    "for counter in range(149):\n",
    "    if cable[counter]-ob_cable[counter] != 0:\n",
    "        print(f'Hey, station {station[counter]} is incorrect, has now {ob_cable[counter]} cables, but should be {cable[counter]}!')\n",
    "    else:\n",
    "        print(f'{station[counter]} has no problems')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Directory has already been created, data could be destroyed!\n",
      "New data is added now!\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Process Process-1:\n",
      "Traceback (most recent call last):\n",
      "  File \"/usr/people/out/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/usr/people/out/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"<ipython-input-3-dd29b58c94ae>\", line 32, in GICfunction\n",
      "    localvar.GIC.to_csv(path_or_buf=f'{path}/GIC/GIC_{localvar.tijd}.csv', sep=';', index=False, header=True)\n",
      "  File \"/usr/people/out/anaconda3/lib/python3.7/site-packages/pandas/core/generic.py\", line 3228, in to_csv\n",
      "    formatter.save()\n",
      "  File \"/usr/people/out/anaconda3/lib/python3.7/site-packages/pandas/io/formats/csvs.py\", line 220, in save\n",
      "    f.close()\n",
      "OSError: [Errno 5] Input/output error\n",
      "Process Process-2:\n",
      "Traceback (most recent call last):\n",
      "  File \"/usr/people/out/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/usr/people/out/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"<ipython-input-3-dd29b58c94ae>\", line 32, in GICfunction\n",
      "    localvar.GIC.to_csv(path_or_buf=f'{path}/GIC/GIC_{localvar.tijd}.csv', sep=';', index=False, header=True)\n",
      "  File \"/usr/people/out/anaconda3/lib/python3.7/site-packages/pandas/core/generic.py\", line 3228, in to_csv\n",
      "    formatter.save()\n",
      "  File \"/usr/people/out/anaconda3/lib/python3.7/site-packages/pandas/io/formats/csvs.py\", line 220, in save\n",
      "    f.close()\n",
      "OSError: [Errno 5] Input/output error\n",
      "Process Process-4:\n",
      "Traceback (most recent call last):\n",
      "  File \"/usr/people/out/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/usr/people/out/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"<ipython-input-3-dd29b58c94ae>\", line 32, in GICfunction\n",
      "    localvar.GIC.to_csv(path_or_buf=f'{path}/GIC/GIC_{localvar.tijd}.csv', sep=';', index=False, header=True)\n",
      "  File \"/usr/people/out/anaconda3/lib/python3.7/site-packages/pandas/core/generic.py\", line 3228, in to_csv\n",
      "    formatter.save()\n",
      "  File \"/usr/people/out/anaconda3/lib/python3.7/site-packages/pandas/io/formats/csvs.py\", line 220, in save\n",
      "    f.close()\n",
      "OSError: [Errno 5] Input/output error\n",
      "Process Process-6:\n",
      "Traceback (most recent call last):\n",
      "  File \"/usr/people/out/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/usr/people/out/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"<ipython-input-3-dd29b58c94ae>\", line 32, in GICfunction\n",
      "    localvar.GIC.to_csv(path_or_buf=f'{path}/GIC/GIC_{localvar.tijd}.csv', sep=';', index=False, header=True)\n",
      "  File \"/usr/people/out/anaconda3/lib/python3.7/site-packages/pandas/core/generic.py\", line 3228, in to_csv\n",
      "    formatter.save()\n",
      "  File \"/usr/people/out/anaconda3/lib/python3.7/site-packages/pandas/io/formats/csvs.py\", line 220, in save\n",
      "    f.close()\n",
      "OSError: [Errno 5] Input/output error\n",
      "Process Process-5:\n",
      "Traceback (most recent call last):\n",
      "  File \"/usr/people/out/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/usr/people/out/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"<ipython-input-3-dd29b58c94ae>\", line 32, in GICfunction\n",
      "    localvar.GIC.to_csv(path_or_buf=f'{path}/GIC/GIC_{localvar.tijd}.csv', sep=';', index=False, header=True)\n",
      "  File \"/usr/people/out/anaconda3/lib/python3.7/site-packages/pandas/core/generic.py\", line 3228, in to_csv\n",
      "    formatter.save()\n",
      "  File \"/usr/people/out/anaconda3/lib/python3.7/site-packages/pandas/io/formats/csvs.py\", line 220, in save\n",
      "    f.close()\n",
      "OSError: [Errno 5] Input/output error\n",
      "Process Process-3:\n",
      "Traceback (most recent call last):\n",
      "  File \"/usr/people/out/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/usr/people/out/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"<ipython-input-3-dd29b58c94ae>\", line 32, in GICfunction\n",
      "    localvar.GIC.to_csv(path_or_buf=f'{path}/GIC/GIC_{localvar.tijd}.csv', sep=';', index=False, header=True)\n",
      "  File \"/usr/people/out/anaconda3/lib/python3.7/site-packages/pandas/core/generic.py\", line 3228, in to_csv\n",
      "    formatter.save()\n",
      "  File \"/usr/people/out/anaconda3/lib/python3.7/site-packages/pandas/io/formats/csvs.py\", line 220, in save\n",
      "    f.close()\n",
      "OSError: [Errno 5] Input/output error\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Script has been completed!\n"
     ]
    }
   ],
   "source": [
    "# obtain real voltages per cable piece and execute total code\n",
    "import os\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import math\n",
    "import logging\n",
    "from scipy.interpolate import griddata\n",
    "from threading import local\n",
    "localvar=local()\n",
    "from multiprocessing import Process\n",
    "from multiprocessing import Lock\n",
    "lock=Lock()\n",
    "path='/usr/people/out/Documents/Magnetic_field/station_results/Halloween'\n",
    "plotday='Halloween storm'\n",
    "logging.basicConfig(filename=f'{path}/GIClogbook.log', level=logging.DEBUG, format='%(asctime)s %(message)s')\n",
    "#################################### first reading in datasets #####################################################\n",
    "try:\n",
    "    os.mkdir(f'{path}/GIC')\n",
    "except:\n",
    "    logging.warning(\"Directory has already been created, data could be destroyed!\")\n",
    "    print(\"Directory has already been created, data could be destroyed!\")\n",
    "logging.info('Reading in datasets!')\n",
    "Electric_Xfiles=[]\n",
    "Electric_Yfiles=[]\n",
    "os.system(f' ls {path}/electric_field_north/*.csv > {path}/temp.txt')\n",
    "f=open(f'{path}/temp.txt')\n",
    "for item in f:\n",
    "    item=item.strip('\\n')\n",
    "    Electric_Xfiles.append(item)\n",
    "f.close()\n",
    "os.system(f' ls {path}/electric_field_east/*.csv > {path}/temp.txt')\n",
    "f=open(f'{path}/temp.txt')\n",
    "for item in f:\n",
    "    item=item.strip('\\n')\n",
    "    Electric_Yfiles.append(item)\n",
    "f.close()\n",
    "os.system(f'rm {path}/temp.txt')\n",
    "logging.debug('Electric files created!')\n",
    "\n",
    "for counter,file in enumerate(Electric_Xfiles):\n",
    "    Xfile=pd.read_csv(file, delimiter=' ', header=None)\n",
    "    values=Xfile.to_numpy()\n",
    "    break\n",
    "EX_matrix=np.zeros((len(Electric_Xfiles),len(values)))    \n",
    "EY_matrix=np.zeros((len(Electric_Xfiles),len(values)))\n",
    "logging.debug('Electric matrices have been made in memory!')\n",
    "\n",
    "for counter,file in enumerate(Electric_Xfiles):\n",
    "    Xfile=pd.read_csv(file, delimiter=' ', header=None)\n",
    "    values=Xfile.to_numpy()\n",
    "    EX_matrix[counter,:]=values[:,2]\n",
    "logging.debug('EX_matrix has been made!')\n",
    "lat=values[:,1]\n",
    "lon=values[:,0]\n",
    "for counter,file in enumerate(Electric_Yfiles):\n",
    "    Yfile=pd.read_csv(file, delimiter=' ', header=None)\n",
    "    values=Yfile.to_numpy()\n",
    "    EY_matrix[counter,:]=values[:,2]\n",
    "del item, f, Xfile, values, Yfile\n",
    "\n",
    "######################################### Getting the needed GIC matrices and code #################################\n",
    "logging.info('Starting with the GIC code!')\n",
    "path2='/usr/people/out/Documents/380+220kV_extended'\n",
    "kabels=pd.read_csv(path2+'/spreadsheetcables.csv', delimiter = ';')\n",
    "trafo=pd.read_csv(path2+'/spreadsheettrafo.csv', delimiter = ';')\n",
    "trafo_connect=np.zeros((len(trafo),len(trafo))) #connectivity trafo\n",
    "trafo_all_connections=np.zeros((len(trafo),len(kabels))) #connections possible between trafo and every cable\n",
    "trafo_cond=np.zeros((len(trafo),len(trafo))) # The conductivity matrix\n",
    "stat_heading=np.zeros((len(trafo),len(trafo))) #heading stations to another\n",
    "stat_length=np.zeros((len(trafo),len(trafo))) #length between stations\n",
    "station_lat=np.zeros(len(trafo)) #latitude stations in degrees\n",
    "station_lon=np.zeros(len(trafo)) #longitude stations in degrees\n",
    "ground_cond=np.zeros(len(trafo))\n",
    "cable_icon=np.zeros(len(kabels)) # icon array for cable and trafo resp.\n",
    "trafo_icon=np.zeros(len(trafo))\n",
    "\n",
    "##### connect trafo and cable number to position in matrix #####\n",
    "for line in range(len(kabels)):\n",
    "    cable_icon[line]=kabels.at[line,'kabelnr']\n",
    "for line in range(len(trafo)):\n",
    "    trafo_icon[line]=trafo.at[line,'trafonr']\n",
    "##### make trafo-trafo connectivity matrix ######\n",
    "for line in range(len(trafo)): \n",
    "    temp=trafo.at[line,'verbonden trafo'] #get right column\n",
    "    temp=temp.split(\",\") #split values\n",
    "    \n",
    "    for item in temp:\n",
    "        temp2=int(item)\n",
    "        trafo_connect[line,np.where(trafo_icon == temp2)[0]]=True #check for connection other trafo\n",
    "        del temp2\n",
    "    del temp\n",
    "###### make trafo-cable connectivity matrix ######\n",
    "for line in range(len(trafo)):\n",
    "    temp=trafo.at[line,'alle aansluitingen']\n",
    "    temp=temp.split(\",\")\n",
    "    for item in temp:\n",
    "        temp2=int(item)\n",
    "        trafo_all_connections[line,np.where(cable_icon == temp2)[0]]=True\n",
    "        del temp2\n",
    "    del temp\n",
    "###### make conductivity matrix ######\n",
    "for row,line in enumerate(trafo_connect):\n",
    "    trafo_cond[row,row]=trafo.at[row,'conductivity total']\n",
    "    for column,item in enumerate(line):\n",
    "        if item:\n",
    "            temp=trafo_all_connections[row,:]+trafo_all_connections[column,:]\n",
    "            temp2=0\n",
    "            for counter,value in enumerate(temp):\n",
    "                if value == 2: # if 2 then we have found the connecting cables\n",
    "                    temp2+=1/(float(kabels.at[counter,'conductivity'])*kabels.at[counter,'kab/3'])  #because of serieschain we have to add 1/sigma\n",
    "#             if temp2==0:\n",
    "#                 print(row,column)\n",
    "            trafo_cond[row,column]=-1/temp2 #add cable resistance to off-diagonal\n",
    "            trafo_cond[row,row]+=1/temp2 #add cable resistance to trace\n",
    "            del temp, temp2\n",
    "###### get heading and length between stations #####\n",
    "for row,line in enumerate(trafo_connect):\n",
    "    for column,item in enumerate(line):\n",
    "        if item and column>=row:\n",
    "            Alat=np.radians(trafo.at[row,'lat'])\n",
    "            Alon=np.radians(trafo.at[row,'lon'])\n",
    "            Blat=np.radians(trafo.at[column,'lat'])\n",
    "            Blon=np.radians(trafo.at[column,'lon'])\n",
    "            temp=math.cos(Blat)*math.sin(Blon-Alon)\n",
    "            temp2=math.cos(Alat)*math.sin(Blat)-math.sin(Alat)*math.cos(Blat)*math.cos(Blon-Alon)\n",
    "            stat_heading[row,column]=np.abs(math.degrees(math.atan(temp/temp2)))\n",
    "            temp3=math.sin((Blat-Alat)/2.)**2+math.cos(Alat)*math.cos(Blat)*math.sin((Blon-Alon)/2.)**2\n",
    "            stat_length[row,column]=6371000*2*math.atan(np.sqrt(temp3)/np.sqrt(1-temp3))\n",
    "            stat_heading[column,row]=stat_heading[row,column]\n",
    "            stat_length[column,row]=stat_length[row,column]\n",
    "            del temp, temp2, temp3, Alat, Alon, Blat, Blon\n",
    "del line, item, row, column, value, counter\n",
    "######### get necessary arrays ########\n",
    "for item in range(len(trafo)):\n",
    "    station_lat[item]=trafo.at[item,'lat']\n",
    "    station_lon[item]=trafo.at[item,'lon']\n",
    "    ground_cond[item]=trafo.at[item,'conductivity total']\n",
    "\n",
    "############################### Run the function with multiple processors ##########################################\n",
    "logging.info('Start multiprocessing!')\n",
    "print(\"New data is added now!\")\n",
    "n=6\n",
    "nrsteps=int(1440*3/n)\n",
    "threads=list()\n",
    "for index in range(n):\n",
    "    q=Process(target=GICfunction, args=(index+1,nrsteps*index,nrsteps*(index+1),trafo,EX_matrix,EY_matrix,lat,lon,station_lat,station_lon,trafo_connect,stat_heading,stat_length,trafo_cond,ground_cond,path,path2,kabels,trafo_all_connections,plotday))\n",
    "    threads.append(q)\n",
    "    q.start()\n",
    "for thread in threads:\n",
    "    thread.join()\n",
    "logging.info(\"Script has been completed!\")\n",
    "print(\"Script has been completed!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def GICfunction(q,begin,end,trafo,EX_matrix,EY_matrix,lat,lon,station_lat,station_lon,trafo_connect,stat_heading,stat_length,trafo_cond,ground_cond,path,path2,kabels,trafo_all_connections,plotday):\n",
    "    \n",
    "######################################### interpolation ############################################################\n",
    "    localvar.volt_result=np.zeros(len(trafo))\n",
    "    localvar.J_total=np.zeros(len(trafo))\n",
    "    logging.info(f'Thread {q} has started interpolation!')\n",
    "    for localvar.time in range(begin,end):#range(len(grid_EX)):\n",
    "        localvar.J_north, localvar.J_east=ObtainJ(q,kabels,EX_matrix,EY_matrix,lat,lon,localvar.time,trafo_connect,trafo_all_connections,trafo_cond)\n",
    "        localvar.J_total=localvar.J_north+localvar.J_east\n",
    "        localvar.volt_result=np.linalg.solve(trafo_cond,localvar.J_total)\n",
    "        localvar.I_GIC=localvar.volt_result*ground_cond\n",
    "        \n",
    "##################################### getting max I_GIC and writing results ########################################\n",
    "        logging.info(f'Thread {q} is writing results to files for timestep {localvar.time}!')\n",
    "        localvar.maxAMP=1\n",
    "        if localvar.time<10:\n",
    "            localvar.tijd=f'000{localvar.time}'\n",
    "        elif localvar.time<100 and localvar.time>9:\n",
    "            localvar.tijd=f'00{localvar.time}'\n",
    "        elif localvar.time<1000 and localvar.time>99:\n",
    "            localvar.tijd=f'0{localvar.time}'\n",
    "        else:\n",
    "            localvar.tijd=f'{localvar.time}'\n",
    "        \n",
    "        ##### Save files #######\n",
    "        localvar.GIC=pd.DataFrame(columns=['lon','lat','GIC',f'GIC/{localvar.maxAMP}'])\n",
    "        GICmatrix=pd.DataFrame()\n",
    "        localvar.GIC.at[:,'lon']=station_lon\n",
    "        localvar.GIC.at[:,'lat']=station_lat\n",
    "        localvar.GIC.at[:,'GIC']=localvar.I_GIC\n",
    "        localvar.GIC.at[:,f'GIC/{localvar.maxAMP}']=localvar.I_GIC/localvar.maxAMP\n",
    "        localvar.GIC.to_csv(path_or_buf=f'{path}/GIC/GIC_{localvar.tijd}.csv', sep=';', index=False, header=True)\n",
    "        \n",
    "################################### Plotting results ###############################################################\n",
    "        lim1=3.3\n",
    "        lim2=7.5\n",
    "        lim3=50.5\n",
    "        lim4=54\n",
    "        legendlon=lim1+0.18\n",
    "        legendlat=lim4-0.1\n",
    "        textlon=legendlon+0.33\n",
    "        textlat=legendlat-0.01\n",
    "\n",
    "        with lock:\n",
    "            legend=open(f'{path2}/legend.txt','w+')\n",
    "            legend.write(f'{legendlon} {legendlat} 1 1')\n",
    "            legend.close()\n",
    "            legendtxt=open(f'{path2}/legendtext.txt', 'w+')\n",
    "            legendtxt.write(f'{textlon} {textlat} {localvar.maxAMP}A')\n",
    "            legendtxt.close()\n",
    "\n",
    "            ##### Use GMT to plot GICs ######\n",
    "            minute=localvar.time%60\n",
    "            hour=int(localvar.time/60)%24\n",
    "            DAY=int(localvar.time/(60*24))\n",
    "            if minute < 10:\n",
    "                minute=f'0{minute}'\n",
    "            if hour < 10:\n",
    "                hour=f'0{hour}'\n",
    "            \n",
    "            title=f'GIC at {plotday} - {DAY}:{hour}:{minute}'\n",
    "            proj='-JM15C -P'\n",
    "            lims=f'-R{lim1}/{lim2}/{lim3}/{lim4}'\n",
    "            psfile=f'{path}/GIC/GIC_at_{localvar.tijd}.ps' #aanpassen\n",
    "            pngfile=f'{path}/GIC/GIC_at_{localvar.tijd}.png' #aanpassen\n",
    "            os.system(f'gmt pscoast {proj} {lims} -W0.5p -K -Ggrey -Slightblue -Df -N1/0.25p> {psfile}' )\n",
    "            os.system(f'gmt psbasemap {proj} {lims} -Ba1g1 -BWeSn+t\"{title}\" -O -K>> {psfile}' )\n",
    "            os.system(f'gmt psxy {path2}/cables.csv {proj} {lims} -W0.5p -Wred -O -K>> {psfile}' )\n",
    "            os.system(f'gmt psxy {path}/GIC/GIC_{localvar.tijd}.csv {proj} {lims} -Ctopo.cpt -Scc -O -K>> {psfile}')    \n",
    "            os.system(f'gmt psxy {path2}/legend.txt {proj} {lims} -Ctopo.cpt -W -Scc -O -K>> {psfile}')\n",
    "            os.system(f'gmt pstext {path2}/legendtext.txt {proj} {lims} -F+f30pHelvetica,black -O>> {psfile}')\n",
    "        os.system(f'convert -density 300 {psfile} {pngfile}')\n",
    "        os.system(f'rm {psfile}')\n",
    "        logging.info(f'Thread {q} has fulfilled timestep {localvar.time}!')\n",
    "    logging.info(f'Thread {q} is finished!')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ObtainJ(q,kabels,EX_matrix,EY_matrix,lat,lon,time,trafo_connect,trafo_all_connections,trafo_cond):\n",
    "    localvar.cablecheck=np.zeros(len(kabels))\n",
    "    localvar.E_kabels=np.zeros((len(kabels),2))      \n",
    "    logging.info(f'Thread {q} has started integration procedure!')\n",
    "    localvar.E_kabels=calcE(kabels,EX_matrix,EY_matrix,lat,lon,time)\n",
    "    logging.info(f'Thread {q} has finished integration procedure and is now writing results!')\n",
    "    localvar.stat_voltN=np.zeros((len(trafo_connect),len(trafo_connect)))\n",
    "    localvar.stat_voltE=np.zeros((len(trafo_connect),len(trafo_connect)))\n",
    "    localvar.J_north=np.zeros(len(trafo_connect))\n",
    "    localvar.J_east=np.zeros(len(trafo_connect))\n",
    "    for localvar.row,localvar.line in enumerate(trafo_connect):\n",
    "        ruleA=999\n",
    "        for localvar.column,localvar.item in enumerate(localvar.line):\n",
    "            if localvar.item:\n",
    "                for localvar.number in range(len(kabels)):\n",
    "                    localvar.cablecheck[localvar.number]=trafo_all_connections[localvar.row,localvar.number]+trafo_all_connections[localvar.column,localvar.number]\n",
    "                localvar.A=np.array(np.where(localvar.cablecheck==2)) #find indices that indicate cables connected\n",
    "\n",
    "                localvar.coord=trafo.at[localvar.row,'lat']\n",
    "#                 print(localvar.row, localvar.column, localvar.coord, localvar.A, len(localvar.A[0]))\n",
    "                for localvar.counter2 in range(len(localvar.A[0])): #double loop to check the cable connections\n",
    "#                     NEWCOUNTER+=1\n",
    "#                     MEGACOUNTER+=1\n",
    "                    for localvar.counter in range(len(localvar.A[0])):\n",
    "                        if abs(localvar.coord-kabels.at[localvar.A[0,localvar.counter],'strtlat'])<0.00001 and abs(ruleA-localvar.A[0,localvar.counter])>0.51: #check coord for which cable is connected and same cable is not allowed!\n",
    "                            localvar.coord=kabels.at[localvar.A[0,localvar.counter],'eindlat']\n",
    "                            ruleA=localvar.A[0,localvar.counter] #rule to ensure that the same cable is not picked again\n",
    "#                             MEGACOUNTER+=1\n",
    "#                             print(localvar.row,localvar.column, localvar.coord)\n",
    "                            # first North component\n",
    "                            if kabels.at[localvar.A[0,localvar.counter],'strtlat'] < kabels.at[localvar.A[0,localvar.counter],'eindlat']:\n",
    "                                localvar.stat_voltN[localvar.row,localvar.column]+=localvar.E_kabels[localvar.A[0,localvar.counter],0]*-1\n",
    "                            else:\n",
    "                                localvar.stat_voltN[localvar.row,localvar.column]+=localvar.E_kabels[localvar.A[0,localvar.counter],0]\n",
    "                            # now East component    \n",
    "                            if kabels.at[localvar.A[0,localvar.counter],'strtlon'] < kabels.at[localvar.A[0,localvar.counter],'eindlon']:\n",
    "                                localvar.stat_voltE[localvar.row,localvar.column]+=localvar.E_kabels[localvar.A[0,localvar.counter],1]*-1\n",
    "                            else:\n",
    "                                localvar.stat_voltE[localvar.row,localvar.column]+=localvar.E_kabels[localvar.A[0,localvar.counter],1]\n",
    "                            break                           \n",
    "                        elif abs(localvar.coord-kabels.at[localvar.A[0,localvar.counter],'eindlat'])<0.00001 and abs(ruleA-localvar.A[0,localvar.counter])>0.51:\n",
    "                            ruleA=localvar.A[0,localvar.counter]\n",
    "#                             MEGACOUNTER+=1\n",
    "                            localvar.coord=kabels.at[localvar.A[0,localvar.counter],'strtlat']\n",
    "#                             print(localvar.row, localvar.column, localvar.coord)\n",
    "                            # first North component\n",
    "                            if kabels.at[localvar.A[0,localvar.counter],'strtlat'] < kabels.at[localvar.A[0,localvar.counter],'eindlat']:\n",
    "                                localvar.stat_voltN[localvar.row,localvar.column]+=localvar.E_kabels[localvar.A[0,localvar.counter],0]\n",
    "                            else:\n",
    "                                localvar.stat_voltN[localvar.row,localvar.column]+=localvar.E_kabels[localvar.A[0,localvar.counter],0]*-1\n",
    "                            # now East component    \n",
    "                            if kabels.at[localvar.A[0,localvar.counter],'strtlon'] < kabels.at[localvar.A[0,localvar.counter],'eindlon']:\n",
    "                                localvar.stat_voltE[localvar.row,localvar.column]+=localvar.E_kabels[localvar.A[0,localvar.counter],1]\n",
    "                            else:\n",
    "                                localvar.stat_voltE[localvar.row,localvar.column]+=localvar.E_kabels[localvar.A[0,localvar.counter],1]*-1\n",
    "                            break\n",
    "                        else:\n",
    "                            pass\n",
    "#         print(localvar.row,NEWCOUNTER)\n",
    "#     print(f'Amount of cables is {MEGACOUNTER/2}')\n",
    "#                         else:\n",
    "#                             print(localvar.row, localvar.column, 'error')\n",
    "    for localvar.row,localvar.line in enumerate(trafo_connect):\n",
    "        for localvar.column,localvar.item in enumerate(localvar.line):\n",
    "            localvar.J_north[localvar.row]+=localvar.stat_voltN[localvar.row,localvar.column]*trafo_cond[localvar.row,localvar.column]*-1*-1 #extra -1 -1 to get J in opposite direction of E\n",
    "            localvar.J_east[localvar.row]+=localvar.stat_voltE[localvar.row,localvar.column]*trafo_cond[localvar.row,localvar.column]*-1*-1\n",
    "    return localvar.J_north, localvar.J_east"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calcE(kabels,EX_matrix,EY_matrix,lat,lon,time): #E for all cables\n",
    "    from scipy.interpolate import griddata\n",
    "    from scipy.integrate import simps\n",
    "    localvar.heading=np.zeros(len(kabels))\n",
    "    localvar.old=np.zeros((len(kabels),2))\n",
    "    nr=40 # amount of nodes\n",
    "    while True:\n",
    "        localvar.E_all=np.zeros((len(kabels),2))\n",
    "        localvar.latrange=np.zeros((len(kabels),nr))\n",
    "        localvar.lonrange=np.zeros((len(kabels),nr))\n",
    "        localvar.GridEX=np.zeros((len(kabels),nr))\n",
    "        localvar.GridEY=np.zeros((len(kabels),nr))\n",
    "    \n",
    "        for number in range(len(kabels)):\n",
    "            localvar.latrange[number,:]=np.linspace(kabels.at[number,'strtlat'],kabels.at[number,'eindlat'],nr) \n",
    "            localvar.lonrange[number,:]=np.linspace(kabels.at[number,'strtlon'],kabels.at[number,'eindlon'],nr) \n",
    "            localvar.heading[number]=kabels.at[number,'heading']\n",
    "        localvar.GridEX=griddata((lat,lon),EX_matrix[time,:],(localvar.latrange,localvar.lonrange),method='cubic') #interpolate value\n",
    "        localvar.GridEY=griddata((lat,lon),EY_matrix[time,:],(localvar.latrange,localvar.lonrange),method='cubic')\n",
    "        for number in range(len(kabels)):\n",
    "            localvar.E_all[number,0]+=abs(np.cos(np.radians(localvar.heading[number])))*simps(localvar.GridEX[number,:],np.linspace(0,kabels.at[number,'length'],nr))\n",
    "            localvar.E_all[number,1]+=abs(np.sin(np.radians(localvar.heading[number])))*simps(localvar.GridEY[number,:],np.linspace(0,kabels.at[number,'length'],nr))\n",
    "        print(nr, np.sum(abs(localvar.old-localvar.E_all)))\n",
    "        if np.sum(abs(localvar.old-localvar.E_all))<10**-5:\n",
    "            print('Iterations used', nr-1)\n",
    "            break\n",
    "        else:\n",
    "            localvar.old[:,0]=localvar.E_all[:,0]\n",
    "            localvar.old[:,1]=localvar.E_all[:,1]\n",
    "            nr+=1\n",
    "    return localvar.E_all"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
